////////////////////////////////////////////////////////////////////////////////// Project: Orange Exchange issue 39// FileName: Competition.as// Created by: Angel // updated : 19 dec 2013////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// IMPORTS////////////////////////////////////////////////////////////////////////////////import mx.events.EventDispatcher;import mx.utils.Delegate;import com.greensock.TweenMax;import com.greensock.easing.*;////////////////////////////////////////////////////////////////////////////////// CLASS: Competition ////////////////////////////////////////////////////////////////////////////////class exchange.sections.competition.Competition extends MovieClip{		////////////////////////////////////////////////////////////////////////////	// PROPERTIES	////////////////////////////////////////////////////////////////////////////	private static var instance			: Competition;	public var page_name 				: String = "competition";	public var competiton_url           : String = 'http://www.orange-exchange.co.uk/comp38.cfm?oe=dir';		public var navText					: Array = new Array("", "star prize", "2nd prize", "3rd prize");		private var view_width				: Number = 960;	private var view_height				: Number = 500;		//on stage assets	public var header_mc1 				: MovieClip;		public var header_mc2 				: MovieClip;		public var line_mc 					: MovieClip;		public var carousel_mc				: MovieClip;		public var terms_mc 				: MovieClip;		public var sidePanel 				: MovieClip;	public var side_text_mc				: MovieClip;	public var expanded_mc				: MovieClip;	public var terms_btn				: Button;	public var comp_btn					: Button;		private var selectedID				: Number = 1;	private var navAmount				: Number = 3;		// DISPATCH	public var addEventListener			: Function; 	public var removeEventListener		: Function; 	public var dispatchEvent			: Function;		////////////////////////////////////////////////////////////////////////////	// Constructor	////////////////////////////////////////////////////////////////////////////	public function Competition()	{				EventDispatcher.initialize(this);	}		public static function getInstance() : Competition 	{		return instance;	}	////////////////////////////////////////////////////////////////////////////	// On Load	///////////////////////////////////////////////////////////////////////////	public function onLoad() : Void	{		instance = this;		initPage();	}		////////////////////////////////////////////////////////////////////////////	// Initialise	///////////////////////////////////////////////////////////////////////////	private function initPage() : Void	{		findObjects(this);				terms_btn = sidePanel.terms_btn;		comp_btn = sidePanel.comp_btn;		side_text_mc = sidePanel.side_text_mc;		expanded_mc = sidePanel.expanded_mc;				hideAssets();		setupUI();		setupNavigation();	}			////////////////////////////////////////////////////////////////////////////	// Hide on stage assets	///////////////////////////////////////////////////////////////////////////	public function hideAssets() : Void	{		TweenMax.to(header_mc1, 0, { _x:-700 } );		TweenMax.to(header_mc2, 0, { _x:-700 } );		TweenMax.to(sidePanel, 0, { _x:999 } );		TweenMax.to(line_mc, 0, { _xscale:0 } );				TweenMax.to(expanded_mc, 0, { autoAlpha:0} );			}		////////////////////////////////////////////////////////////////////////////	// Show assets	///////////////////////////////////////////////////////////////////////////			public function showAssets( ) : Void	{		var _delay : Number = 0;		TweenMax.to(header_mc1, 1, { autoAlpha:100, _x:header_mc1.init._x, ease:Cubic.easeOut, delay:_delay } );				TweenMax.to(header_mc2, 1, { autoAlpha:100, _x:header_mc2.init._x, ease:Cubic.easeOut, delay:_delay+=.3 } );				TweenMax.to(sidePanel, 1, { autoAlpha:100, _x:sidePanel.init._x, ease:Cubic.easeOut, delay:_delay+=1 } );				TweenMax.to(line_mc, 1, {  _xscale:100, _yscale:100, ease:Quad.easeOut, delay:_delay += .5 } );				TweenMax.delayedCall(_delay+.5, carousel_mc.showFirstSlide, null, carousel_mc);				//carousel_mc.showFirstSlide();	}		////////////////////////////////////////////////////////////////////////////	// Set up UI	///////////////////////////////////////////////////////////////////////////			public function setupUI( ) : Void	{		comp_btn.onRelease = Delegate.create(this, getCompetition);		terms_btn.onRelease = Delegate.create(this, openTerms);				side_text_mc.btn.onRelease = Delegate.create(this, expandSidePanel);		expanded_mc.btn.onRelease = Delegate.create(this, resetSidePanel);			}				////////////////////////////////////////////////////////////////////////////	// Expand side panel	///////////////////////////////////////////////////////////////////////////			public function expandSidePanel( ) : Void	{		var _delay : Number = 0;				TweenMax.to(sidePanel, 1, { _x:sidePanel.init._x - 100, ease:Back.easeInOut, delay:0 } );				//fade out main side menu items		TweenMax.to(terms_btn, .5, { autoAlpha:0, delay:_delay } );		TweenMax.to(comp_btn, .5, { autoAlpha:0, delay:_delay+=.1 } );		TweenMax.to(sidePanel.nav3, .5, { autoAlpha:0, delay:_delay+=.1 } );		TweenMax.to(sidePanel.nav2, .5, { autoAlpha:0, delay:_delay+=.1 } );		TweenMax.to(sidePanel.nav1, .5, { autoAlpha:0, delay:_delay+=.1 } );		TweenMax.to(side_text_mc, .5, { autoAlpha:0, delay:_delay += .1 } );				//show expaned text		TweenMax.to(expanded_mc, 1, { autoAlpha:100, delay:_delay += .5 } );				Tracker.trackClick(page_name, "side_panel/read_more");			}				////////////////////////////////////////////////////////////////////////////	// Reset side panel	///////////////////////////////////////////////////////////////////////////			public function resetSidePanel( ) : Void	{		var _delay : Number = 0;				TweenMax.to(sidePanel, 1, { _x:sidePanel.init._x, ease:Back.easeInOut, delay:0 } );				//hide expaned text		TweenMax.to(expanded_mc, .5, { autoAlpha:0, delay:_delay} );				//fade out main side menu items		TweenMax.to(side_text_mc, .5, { autoAlpha:100, delay:_delay += .5 } );		TweenMax.to(sidePanel.nav1, .5, { autoAlpha:100, delay:_delay += .1 } );		TweenMax.to(sidePanel.nav2, .5, { autoAlpha:100, delay:_delay+=.1 } );		TweenMax.to(sidePanel.nav3, .5, { autoAlpha:100, delay:_delay+=.1 } );		TweenMax.to(comp_btn, .5, { autoAlpha:100, delay:_delay+=.1 } );		TweenMax.to(terms_btn, .5, { autoAlpha:100, delay:_delay+=.1 } );			}					////////////////////////////////////////////////////////////////////////////	// Set up buttons menu Navigation	///////////////////////////////////////////////////////////////////////////		private function setupNavigation():Void	{		for (var i : Number = 1; i <= navAmount; i++) 		{				var nav_mc : MovieClip = sidePanel['nav'+i];				nav_mc.id = i;								nav_mc.text_mc.txt.text = "> " + navText[i];								var nd = nav_mc.onRelease = Delegate.create(this, onNavClick);				nd.id = i;				nd.mc = nav_mc;		}				checkNavigation();	}	////////////////////////////////////////////////////////////////////////////	// Check Navigation to which ID is selected	///////////////////////////////////////////////////////////////////////////		private function checkNavigation():Void	{		for (var i : Number = 1; i <= navAmount; i++) 		{			var nav_mc : MovieClip = sidePanel['nav'+i];			if ( nav_mc.id == selectedID )			{				nav_mc.gotoAndStop(2);				nav_mc.enabled = false;				nav_mc.text_mc.txt.text = "< " + navText[i];			}			else 			{				nav_mc.gotoAndStop(1);				nav_mc.enabled = true;				nav_mc.text_mc.txt.text = "> " + navText[i];			}		}	}	////////////////////////////////////////////////////////////////////////////	// Mouse Navigation functions	///////////////////////////////////////////////////////////////////////////			private function onNavClick():Void	{		var clickedID : Number = arguments.caller.id;				selectedID = clickedID;				checkNavigation();				carousel_mc.showSlideByID(selectedID);				var ptext : String;		if (selectedID == 1) { ptext = "star_prize";  }		if (selectedID == 2) { ptext = "2nd_prize";  }		if (selectedID == 3) { ptext = "3rd_prize";  }				Tracker.trackClick(page_name, ptext);	}				////////////////////////////////////////////////////////////////////////////	// Disable all links / buttons when Terms and conditions is open	///////////////////////////////////////////////////////////////////////////				private function disableAll():Void	{		terms_btn.enabled = false;		comp_btn.enabled = false;		side_text_mc.btn.enabled = false;		carousel_mc.disableAll();				for (var i : Number = 1; i <= navAmount; i++) 		{			var nav_mc : MovieClip = sidePanel['nav'+i];			nav_mc.enabled = false;		}	}	////////////////////////////////////////////////////////////////////////////	// Enable all links / buttons 	///////////////////////////////////////////////////////////////////////////		private function enableAll():Void	{		terms_btn.enabled = true;		comp_btn.enabled = true;		side_text_mc.btn.enabled = true;		carousel_mc.enableAll();				for (var i : Number = 1; i <= navAmount; i++) 		{			var nav_mc : MovieClip = sidePanel['nav'+i];			nav_mc.enabled = true;		}	}	////////////////////////////////////////////////////////////////////////////	// Open Terms and Conditions	///////////////////////////////////////////////////////////////////////////		private function openTerms():Void	{		Tracker.trackClick(page_name, 'terms_and_conditions_clicked');		disableAll();		terms_mc = this.attachMovie('TermsMovieClip', 'terms_mc', this.getNextHighestDepth(), { _alpha:0, _x:0, _y:0 } );		TweenMax.to(terms_mc, .6, { _alpha:100, overwrite:true } );		terms_mc.close_btn.onRelease = Delegate.create(this, closeTerms);	}	////////////////////////////////////////////////////////////////////////////	// Close Terms and Conditions	///////////////////////////////////////////////////////////////////////////			private function closeTerms():Void	{		terms_mc.removeMovieClip();		enableAll();	}	////////////////////////////////////////////////////////////////////////////	// Get the competition link	///////////////////////////////////////////////////////////////////////////		public function getCompetition():Void	{		Tracker.getLink( page_name, competiton_url );	}					////////////////////////////////////////////////////////////////////////////	// REMOVE ALL CHILDREN MOVIECLIPS FROM A MOVIECLIP	///////////////////////////////////////////////////////////////////////////		public function emptyMC(mc:MovieClip):Void 	{		for (var i in mc) 		{			if (typeof(mc[i]) == "movieclip")			{				(mc[i]).removeMovieClip();			}		}	}			////////////////////////////////////////////////////////////////////////////	// sets init values if the object has an "_x" value	///////////////////////////////////////////////////////////////////////////		public function findObjects(obj:Object):Void	{		if (obj._x != undefined)		{			setInitValues(obj);		}				for (var i in obj) 		{			if (obj[i]._x != undefined || obj._name == "initValues") 			{				setInitValues(obj[i]);			}						if (typeof(obj[i]) == "movieclip")			{				findObjects(obj[i]);			}		}	}		////////////////////////////////////////////////////////////////////////////	// Sets init values of an Object - Movieclip / Button	///////////////////////////////////////////////////////////////////////////	public function setInitValues(obj:Object):Void 	{		obj.init = new Object();		obj.init._name = "initValues";				obj.init._x = obj._x;		obj.init._y = obj._y;		obj.init._width = obj._width;		obj.init._height = obj._height;		obj.init._alpha = obj._alpha;		obj.init._rotation = obj._rotation;		obj.init._xscale = obj._xscale;		obj.init._yscale = obj._yscale;	}		////////////////////////////////////////////////////////////////////////////	// Resets the object to its' initial values.	///////////////////////////////////////////////////////////////////////////	public function resetValues(obj:Object):Void 	{		if (obj.init != undefined) 		{			for (var i in obj.init) 			{				if (i != "_name") obj[i] = obj.init[i];			}		}	}		////////////////////////////////////////////////////////////////////////////	// Set params to a selection of objects 	///////////////////////////////////////////////////////////////////////////		private function setParams(baseName:String, properties:Object):Void 	{		var mc:MovieClip;		for (var i:Number = 0; mc = this[baseName + i]; i++) 		{			// test property to see if it is a string. 			// If it is then add it to the current property value			for (var j:String in properties) 			{				if (typeof(properties[j]) == "string") 				{					properties[j] = mc[j] + parseFloat(properties[j]);				}				mc[j] = properties[j];			}		}	}	}